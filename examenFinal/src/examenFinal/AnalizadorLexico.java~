/* The following code was generated by JFlex 1.6.1 */

package examenFinal;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/abela/git/repository5/examenFinal/src/examenFinal/lenguaje.lex</tt>
 */
public class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\60\1\60\1\60\22\0\1\37\1\53\5\0"+
    "\1\4\1\26\1\27\1\7\1\7\1\57\1\10\1\6\1\7\1\5"+
    "\11\3\1\32\1\56\1\55\1\52\1\54\2\0\22\2\1\42\1\31"+
    "\6\2\1\21\1\0\1\22\1\0\1\2\1\0\1\16\1\44\1\47"+
    "\1\36\1\14\1\15\1\43\1\46\1\35\1\2\1\50\1\17\1\40"+
    "\1\41\1\34\1\51\1\2\1\12\1\20\1\11\1\13\1\33\1\45"+
    "\3\2\1\23\1\1\1\24\7\0\1\60\44\0\1\25\12\0\1\25"+
    "\4\0\1\25\5\0\27\25\1\0\37\25\1\0\u01ca\25\4\0\14\25"+
    "\16\0\5\25\7\0\1\25\1\0\1\25\21\0\165\25\1\0\2\25"+
    "\2\0\4\25\1\0\1\25\6\0\1\25\1\0\3\25\1\0\1\25"+
    "\1\0\24\25\1\0\123\25\1\0\213\25\1\0\255\25\1\0\46\25"+
    "\2\0\1\25\7\0\47\25\11\0\55\25\1\0\1\25\1\0\2\25"+
    "\1\0\2\25\1\0\1\25\10\0\33\25\5\0\3\25\35\0\13\25"+
    "\5\0\100\25\12\30\4\0\146\25\1\0\10\25\2\0\12\25\1\0"+
    "\6\25\12\30\3\25\2\0\1\25\20\0\73\25\2\0\145\25\16\0"+
    "\12\30\54\25\4\0\1\25\5\0\56\25\22\0\34\25\104\0\23\25"+
    "\61\0\200\25\2\0\12\30\1\0\23\25\1\0\10\25\2\0\2\25"+
    "\2\0\26\25\1\0\7\25\1\0\1\25\3\0\4\25\2\0\11\25"+
    "\2\0\2\25\2\0\4\25\10\0\1\25\4\0\2\25\1\0\5\25"+
    "\2\0\12\30\2\25\17\0\3\25\1\0\6\25\4\0\2\25\2\0"+
    "\26\25\1\0\7\25\1\0\2\25\1\0\2\25\1\0\2\25\2\0"+
    "\1\25\1\0\5\25\4\0\2\25\2\0\3\25\3\0\1\25\7\0"+
    "\4\25\1\0\1\25\7\0\12\30\6\25\13\0\3\25\1\0\11\25"+
    "\1\0\3\25\1\0\26\25\1\0\7\25\1\0\2\25\1\0\5\25"+
    "\2\0\12\25\1\0\3\25\1\0\3\25\2\0\1\25\17\0\4\25"+
    "\2\0\12\30\21\0\3\25\1\0\10\25\2\0\2\25\2\0\26\25"+
    "\1\0\7\25\1\0\2\25\1\0\5\25\2\0\11\25\2\0\2\25"+
    "\2\0\3\25\10\0\2\25\4\0\2\25\1\0\5\25\2\0\12\30"+
    "\1\0\1\25\20\0\2\25\1\0\6\25\3\0\3\25\1\0\4\25"+
    "\3\0\2\25\1\0\1\25\1\0\2\25\3\0\2\25\3\0\3\25"+
    "\3\0\14\25\4\0\5\25\3\0\3\25\1\0\4\25\2\0\1\25"+
    "\6\0\1\25\16\0\12\30\20\0\4\25\1\0\10\25\1\0\3\25"+
    "\1\0\27\25\1\0\20\25\3\0\10\25\1\0\3\25\1\0\4\25"+
    "\7\0\2\25\1\0\2\25\6\0\4\25\2\0\12\30\21\0\3\25"+
    "\1\0\10\25\1\0\3\25\1\0\27\25\1\0\12\25\1\0\5\25"+
    "\2\0\11\25\1\0\3\25\1\0\4\25\7\0\2\25\7\0\1\25"+
    "\1\0\4\25\2\0\12\30\1\0\2\25\16\0\3\25\1\0\10\25"+
    "\1\0\3\25\1\0\51\25\2\0\10\25\1\0\3\25\1\0\5\25"+
    "\10\0\1\25\10\0\4\25\2\0\12\30\12\0\6\25\2\0\2\25"+
    "\1\0\22\25\3\0\30\25\1\0\11\25\1\0\1\25\2\0\7\25"+
    "\3\0\1\25\4\0\6\25\1\0\1\25\1\0\10\25\6\0\12\30"+
    "\2\0\2\25\15\0\72\25\5\0\17\25\1\0\12\30\47\0\2\25"+
    "\1\0\1\25\2\0\2\25\1\0\1\25\2\0\1\25\6\0\4\25"+
    "\1\0\7\25\1\0\3\25\1\0\1\25\1\0\1\25\2\0\2\25"+
    "\1\0\15\25\1\0\3\25\2\0\5\25\1\0\1\25\1\0\6\25"+
    "\2\0\12\30\2\0\4\25\40\0\1\25\27\0\2\25\6\0\12\30"+
    "\13\0\1\25\1\0\1\25\1\0\1\25\4\0\12\25\1\0\44\25"+
    "\4\0\24\25\1\0\22\25\1\0\44\25\11\0\1\25\71\0\100\25"+
    "\12\30\6\0\100\25\12\30\4\25\2\0\46\25\1\0\1\25\5\0"+
    "\1\25\2\0\53\25\1\0\u014d\25\1\0\4\25\2\0\7\25\1\0"+
    "\1\25\1\0\4\25\2\0\51\25\1\0\4\25\2\0\41\25\1\0"+
    "\4\25\2\0\7\25\1\0\1\25\1\0\4\25\2\0\17\25\1\0"+
    "\71\25\1\0\4\25\2\0\103\25\2\0\3\25\40\0\20\25\20\0"+
    "\125\25\14\0\u026c\25\2\0\21\25\1\0\32\25\5\0\113\25\3\0"+
    "\13\25\7\0\15\25\1\0\7\25\13\0\25\25\13\0\24\25\14\0"+
    "\15\25\1\0\3\25\1\0\2\25\14\0\124\25\3\0\1\25\4\0"+
    "\2\25\2\0\12\30\41\0\3\25\2\0\12\30\6\0\130\25\10\0"+
    "\53\25\5\0\106\25\12\0\37\25\1\0\14\25\4\0\14\25\12\0"+
    "\12\30\36\25\2\0\5\25\13\0\54\25\4\0\32\25\6\0\12\30"+
    "\46\0\34\25\4\0\77\25\1\0\35\25\2\0\1\25\12\30\6\0"+
    "\12\30\15\0\1\25\10\0\17\25\101\0\114\25\4\0\12\30\21\0"+
    "\11\25\14\0\60\25\12\30\72\25\14\0\70\25\10\0\12\30\3\0"+
    "\3\25\12\30\44\25\122\0\3\25\1\0\43\25\1\0\2\25\6\0"+
    "\366\25\6\0\u011a\25\2\0\6\25\2\0\46\25\2\0\6\25\2\0"+
    "\10\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0\37\25\2\0"+
    "\65\25\1\0\7\25\1\0\1\25\3\0\3\25\1\0\7\25\3\0"+
    "\4\25\2\0\6\25\4\0\15\25\5\0\3\25\1\0\7\25\53\0"+
    "\1\60\1\60\25\0\2\25\23\0\1\25\34\0\1\25\15\0\1\25"+
    "\20\0\15\25\63\0\41\25\21\0\1\25\4\0\1\25\2\0\12\25"+
    "\1\0\1\25\3\0\5\25\6\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\4\25\1\0\13\25\2\0\4\25\5\0\5\25\4\0\1\25"+
    "\21\0\51\25\u032d\0\64\25\u0716\0\57\25\1\0\57\25\1\0\205\25"+
    "\6\0\11\25\14\0\46\25\1\0\1\25\5\0\1\25\2\0\70\25"+
    "\7\0\1\25\17\0\30\25\11\0\7\25\1\0\7\25\1\0\7\25"+
    "\1\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25"+
    "\1\0\40\25\57\0\1\25\u01d5\0\3\25\31\0\17\25\1\0\5\25"+
    "\2\0\5\25\4\0\126\25\2\0\2\25\2\0\3\25\1\0\132\25"+
    "\1\0\4\25\5\0\51\25\3\0\136\25\21\0\33\25\65\0\20\25"+
    "\u0200\0\u19b6\25\112\0\u51cd\25\63\0\u048d\25\103\0\56\25\2\0\u010d\25"+
    "\3\0\20\25\12\30\2\25\24\0\63\25\1\0\12\25\1\0\37\25"+
    "\1\0\123\25\45\0\11\25\2\0\147\25\2\0\4\25\1\0\36\25"+
    "\2\0\2\25\105\0\61\25\30\0\64\25\14\0\105\25\13\0\12\30"+
    "\6\0\30\25\3\0\1\25\4\0\12\30\44\25\2\0\44\25\14\0"+
    "\35\25\3\0\101\25\16\0\1\25\12\30\6\0\20\25\12\30\5\25"+
    "\1\0\67\25\11\0\16\25\2\0\12\30\6\0\27\25\3\0\111\25"+
    "\30\0\3\25\2\0\20\25\2\0\5\25\12\0\6\25\2\0\6\25"+
    "\2\0\6\25\11\0\7\25\1\0\7\25\1\0\53\25\1\0\4\25"+
    "\4\0\2\25\132\0\53\25\1\0\2\25\2\0\12\30\6\0\u2ba4\25"+
    "\14\0\27\25\4\0\61\25\u2104\0\u016e\25\2\0\152\25\46\0\7\25"+
    "\14\0\5\25\5\0\14\25\1\0\15\25\1\0\5\25\1\0\1\25"+
    "\1\0\2\25\1\0\2\25\1\0\154\25\41\0\u016b\25\22\0\100\25"+
    "\2\0\66\25\50\0\14\25\4\0\20\25\20\0\16\25\5\0\2\25"+
    "\30\0\3\25\40\0\5\25\1\0\207\25\23\0\12\30\7\0\32\25"+
    "\4\0\1\25\1\0\32\25\13\0\131\25\3\0\6\25\2\0\6\25"+
    "\2\0\6\25\2\0\3\25\43\0\14\25\1\0\32\25\1\0\23\25"+
    "\1\0\2\25\1\0\17\25\2\0\16\25\42\0\173\25\105\0\65\25"+
    "\210\0\1\25\202\0\35\25\3\0\61\25\17\0\1\25\37\0\40\25"+
    "\20\0\33\25\5\0\53\25\5\0\36\25\2\0\44\25\4\0\10\25"+
    "\1\0\5\25\52\0\236\25\2\0\12\30\126\0\50\25\10\0\64\25"+
    "\234\0\u0137\25\11\0\26\25\12\0\10\25\230\0\6\25\2\0\1\25"+
    "\1\0\54\25\1\0\2\25\3\0\1\25\2\0\27\25\12\0\27\25"+
    "\11\0\37\25\141\0\26\25\12\0\32\25\106\0\70\25\6\0\2\25"+
    "\100\0\4\25\1\0\2\25\5\0\10\25\1\0\3\25\1\0\33\25"+
    "\4\0\3\25\4\0\1\25\40\0\35\25\3\0\35\25\43\0\10\25"+
    "\1\0\36\25\31\0\66\25\12\0\26\25\12\0\23\25\15\0\22\25"+
    "\156\0\111\25\u03b7\0\107\25\37\0\12\30\17\0\74\25\25\0\31\25"+
    "\7\0\12\30\6\0\65\25\1\0\12\30\20\0\44\25\2\0\1\25"+
    "\11\0\105\25\13\0\12\30\1\25\45\0\22\25\1\0\45\25\170\0"+
    "\73\25\5\0\12\30\7\0\3\25\1\0\10\25\2\0\2\25\2\0"+
    "\26\25\1\0\7\25\1\0\2\25\1\0\5\25\2\0\11\25\2\0"+
    "\2\25\2\0\3\25\11\0\1\25\5\0\7\25\2\0\7\25\3\0"+
    "\5\25\u010b\0\106\25\1\0\1\25\10\0\12\30\246\0\66\25\2\0"+
    "\11\25\77\0\101\25\3\0\1\25\13\0\12\30\46\0\70\25\10\0"+
    "\12\30\u01d6\0\100\25\12\30\25\0\1\25\u01c0\0\71\25\u0507\0\u0399\25"+
    "\147\0\157\25\u0b91\0\u042f\25\u33d1\0\u0239\25\7\0\37\25\1\0\12\30"+
    "\146\0\36\25\2\0\5\25\13\0\67\25\11\0\4\25\14\0\12\30"+
    "\11\0\25\25\5\0\23\25\u0370\0\105\25\13\0\57\25\20\0\21\25"+
    "\u4060\0\2\25\u0bfe\0\153\25\5\0\15\25\3\0\11\25\7\0\12\25"+
    "\3\0\2\25\u14c6\0\5\25\3\0\6\25\10\0\10\25\2\0\7\25"+
    "\36\0\4\25\224\0\3\25\u01bb\0\125\25\1\0\107\25\1\0\2\25"+
    "\2\0\1\25\2\0\2\25\2\0\4\25\1\0\14\25\1\0\1\25"+
    "\1\0\7\25\1\0\101\25\1\0\4\25\2\0\10\25\1\0\7\25"+
    "\1\0\34\25\1\0\4\25\1\0\5\25\1\0\1\25\3\0\7\25"+
    "\1\0\u0154\25\2\0\31\25\1\0\31\25\1\0\37\25\1\0\31\25"+
    "\1\0\37\25\1\0\31\25\1\0\37\25\1\0\31\25\1\0\37\25"+
    "\1\0\31\25\1\0\10\25\2\0\62\30\u1000\0\305\25\13\0\7\25"+
    "\u0529\0\4\25\1\0\33\25\1\0\2\25\1\0\1\25\2\0\1\25"+
    "\1\0\12\25\1\0\4\25\1\0\1\25\1\0\1\25\6\0\1\25"+
    "\4\0\1\25\1\0\1\25\1\0\1\25\1\0\3\25\1\0\2\25"+
    "\1\0\1\25\2\0\1\25\1\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\2\25\1\0\1\25\2\0\4\25\1\0\7\25"+
    "\1\0\4\25\1\0\4\25\1\0\1\25\1\0\12\25\1\0\21\25"+
    "\5\0\3\25\1\0\5\25\1\0\21\25\u0274\0\32\25\6\0\32\25"+
    "\6\0\32\25\u0e76\0\ua6d7\25\51\0\u1035\25\13\0\336\25\u3fe2\0\u021e\25"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\25\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\4\1\5"+
    "\2\6\4\3\1\7\1\10\1\11\1\12\1\1\1\13"+
    "\1\14\1\1\11\3\1\15\1\1\1\16\1\17\1\20"+
    "\1\21\3\0\1\4\5\0\1\22\1\23\5\3\1\0"+
    "\1\24\1\0\1\25\2\3\1\26\1\3\1\27\7\3"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\4\1\0"+
    "\1\22\1\0\1\36\1\37\1\22\1\0\3\3\1\40"+
    "\1\3\1\41\1\3\1\42\10\3\1\4\2\0\1\22"+
    "\1\23\1\3\1\43\4\3\1\44\3\3\1\45\2\3"+
    "\1\4\2\0\1\46\1\22\1\3\1\47\1\3\1\0"+
    "\2\3\1\50\1\51\1\3\1\52\1\0\1\53\1\54"+
    "\1\0\1\55\1\56\1\3\2\0\1\3\2\0\1\57"+
    "\5\0\1\60\7\0\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\142\0\223\0\304\0\365\0\61"+
    "\0\61\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\61"+
    "\0\u024c\0\61\0\u027d\0\61\0\61\0\u02ae\0\u02df\0\u0310"+
    "\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498"+
    "\0\u04c9\0\u04fa\0\u052b\0\61\0\61\0\u055c\0\u027d\0\u058d"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u021b\0\61\0\u024c"+
    "\0\61\0\u083b\0\u086c\0\142\0\u089d\0\u08ce\0\u08ff\0\u0930"+
    "\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\u0a56\0\u0a87\0\u05ef\0\u0ab8\0\61"+
    "\0\61\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\142\0\u0bde"+
    "\0\142\0\u0c0f\0\142\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0b1a"+
    "\0\u0e8c\0\142\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\142\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\142\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8"+
    "\0\u0e2a\0\u1109\0\u113a\0\142\0\u116b\0\u119c\0\u11cd\0\u11fe"+
    "\0\142\0\142\0\u122f\0\142\0\u1260\0\142\0\142\0\u1291"+
    "\0\142\0\142\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7"+
    "\0\142\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\61\0\u14dd"+
    "\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\4\1\13\1\4\1\14\1\15\2\4\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\4\1\2\1\27\1\4\1\30\1\31\1\3\1\4"+
    "\1\32\1\33\1\4\1\34\1\35\1\4\1\36\1\4"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\64\0"+
    "\2\4\1\0\1\4\3\0\10\4\1\46\3\0\1\47"+
    "\1\50\1\0\1\47\1\4\1\0\4\4\1\0\12\4"+
    "\11\0\1\47\1\51\1\0\1\51\1\52\2\0\10\47"+
    "\1\46\3\0\1\47\1\50\1\0\1\53\1\47\1\54"+
    "\4\47\1\0\12\47\11\0\1\55\1\56\1\0\1\56"+
    "\3\0\10\55\10\0\1\55\1\0\4\55\1\0\12\55"+
    "\11\0\1\47\1\57\1\0\1\57\1\52\2\0\10\47"+
    "\1\46\3\0\1\47\1\50\1\0\1\53\1\47\1\54"+
    "\4\47\1\0\12\47\12\0\1\60\1\0\1\60\55\0"+
    "\2\4\1\0\1\4\3\0\3\4\1\61\4\4\1\46"+
    "\3\0\1\47\1\50\1\0\1\47\1\4\1\0\4\4"+
    "\1\0\12\4\11\0\2\4\1\0\1\4\3\0\6\4"+
    "\1\62\1\4\1\46\3\0\1\47\1\50\1\0\1\47"+
    "\1\4\1\0\4\4\1\0\12\4\11\0\2\4\1\0"+
    "\1\4\3\0\6\4\1\63\1\4\1\46\3\0\1\47"+
    "\1\50\1\0\1\47\1\4\1\0\1\4\1\64\2\4"+
    "\1\0\12\4\11\0\2\4\1\0\1\4\3\0\10\4"+
    "\1\46\3\0\1\47\1\50\1\0\1\47\1\4\1\0"+
    "\4\4\1\0\5\4\1\65\4\4\7\0\22\66\1\67"+
    "\36\66\24\70\1\71\34\70\2\0\2\47\1\0\1\47"+
    "\3\0\10\47\1\46\3\0\1\47\1\50\1\0\2\47"+
    "\1\0\4\47\1\0\12\47\11\0\1\47\1\53\1\0"+
    "\1\53\3\0\10\47\1\46\3\0\1\47\1\50\1\0"+
    "\1\53\1\47\1\54\4\47\1\0\12\47\11\0\2\4"+
    "\1\0\1\4\3\0\5\4\1\72\2\4\1\46\3\0"+
    "\1\47\1\50\1\0\1\47\1\4\1\0\1\4\1\73"+
    "\2\4\1\0\12\4\11\0\2\4\1\0\1\4\3\0"+
    "\4\4\1\74\3\4\1\46\3\0\1\47\1\50\1\0"+
    "\1\47\1\4\1\0\4\4\1\0\1\4\1\75\10\4"+
    "\11\0\2\4\1\0\1\4\3\0\10\4\1\46\3\0"+
    "\1\47\1\50\1\0\1\47\1\4\1\0\1\4\1\76"+
    "\2\4\1\0\12\4\11\0\2\4\1\0\1\4\3\0"+
    "\2\4\1\77\5\4\1\46\3\0\1\47\1\50\1\0"+
    "\1\47\1\4\1\0\4\4\1\0\12\4\11\0\2\4"+
    "\1\0\1\4\3\0\1\100\7\4\1\46\3\0\1\47"+
    "\1\50\1\0\1\47\1\4\1\0\4\4\1\0\12\4"+
    "\11\0\2\4\1\0\1\4\3\0\1\4\1\101\6\4"+
    "\1\46\3\0\1\47\1\50\1\0\1\47\1\4\1\0"+
    "\4\4\1\0\12\4\11\0\2\4\1\0\1\4\3\0"+
    "\10\4\1\46\3\0\1\47\1\50\1\0\1\47\1\4"+
    "\1\0\4\4\1\0\6\4\1\102\3\4\11\0\2\4"+
    "\1\0\1\4\3\0\5\4\1\103\2\4\1\46\3\0"+
    "\1\47\1\50\1\0\1\47\1\4\1\0\1\4\1\104"+
    "\2\4\1\0\12\4\11\0\2\4\1\0\1\4\3\0"+
    "\1\4\1\105\6\4\1\46\3\0\1\47\1\50\1\0"+
    "\1\47\1\4\1\0\4\4\1\0\12\4\61\0\1\106"+
    "\60\0\1\107\60\0\1\110\60\0\1\111\30\0\1\112"+
    "\36\0\27\50\1\113\31\50\2\0\1\47\1\114\1\0"+
    "\1\114\1\52\2\0\10\47\1\46\3\0\1\47\1\50"+
    "\1\0\1\115\1\47\1\54\4\47\1\0\12\47\12\0"+
    "\1\116\1\0\1\116\55\0\1\47\1\115\1\0\1\115"+
    "\3\0\10\47\1\46\3\0\1\47\1\50\1\0\1\115"+
    "\1\47\1\54\4\47\1\0\12\47\12\0\1\117\1\0"+
    "\1\117\22\0\1\117\32\0\2\55\1\120\1\55\3\0"+
    "\10\55\10\0\1\55\1\0\4\55\1\0\12\55\13\0"+
    "\1\121\56\0\1\47\1\122\1\0\1\122\1\52\2\0"+
    "\10\47\1\46\3\0\1\47\1\50\1\0\1\115\1\47"+
    "\1\54\4\47\1\0\12\47\12\0\1\60\1\0\1\60"+
    "\1\123\54\0\2\4\1\0\1\4\3\0\1\124\7\4"+
    "\1\46\3\0\1\47\1\50\1\0\1\47\1\4\1\0"+
    "\4\4\1\0\12\4\11\0\2\4\1\0\1\4\3\0"+
    "\7\4\1\125\1\46\3\0\1\47\1\50\1\0\1\47"+
    "\1\4\1\0\4\4\1\0\12\4\11\0\2\4\1\0"+
    "\1\4\3\0\10\4\1\46\3\0\1\47\1\50\1\0"+
    "\1\47\1\4\1\0\1\4\1\126\2\4\1\0\12\4"+
    "\11\0\2\4\1\0\1\4\3\0\1\4\1\127\6\4"+
    "\1\46\3\0\1\47\1\50\1\0\1\47\1\4\1\0"+
    "\4\4\1\0\12\4\11\0\2\4\1\0\1\4\3\0"+
    "\10\4\1\46\3\0\1\47\1\50\1\0\1\47\1\4"+
    "\1\0\2\4\1\130\1\4\1\0\12\4\11\0\2\4"+
    "\1\0\1\4\3\0\1\4\1\131\6\4\1\46\3\0"+
    "\1\47\1\50\1\0\1\47\1\4\1\0\4\4\1\0"+
    "\12\4\11\0\2\4\1\0\1\4\3\0\10\4\1\46"+
    "\3\0\1\47\1\50\1\0\1\47\1\4\1\0\2\4"+
    "\1\132\1\4\1\0\12\4\11\0\2\4\1\0\1\4"+
    "\3\0\1\133\7\4\1\46\3\0\1\47\1\50\1\0"+
    "\1\47\1\4\1\0\4\4\1\0\12\4\11\0\2\4"+
    "\1\0\1\4\3\0\2\4\1\134\5\4\1\46\3\0"+
    "\1\47\1\50\1\0\1\47\1\4\1\0\4\4\1\0"+
    "\12\4\11\0\2\4\1\0\1\4\3\0\6\4\1\135"+
    "\1\4\1\46\3\0\1\47\1\50\1\0\1\47\1\4"+
    "\1\0\4\4\1\0\12\4\11\0\2\4\1\0\1\4"+
    "\3\0\1\4\1\136\6\4\1\46\3\0\1\47\1\50"+
    "\1\0\1\47\1\4\1\0\4\4\1\0\12\4\11\0"+
    "\2\4\1\0\1\4\3\0\3\4\1\137\4\4\1\46"+
    "\3\0\1\47\1\50\1\0\1\47\1\4\1\0\4\4"+
    "\1\0\12\4\11\0\2\4\1\0\1\4\3\0\10\4"+
    "\1\46\3\0\1\47\1\50\1\0\1\47\1\4\1\0"+
    "\2\4\1\140\1\4\1\0\12\4\11\0\2\4\1\0"+
    "\1\4\3\0\7\4\1\141\1\46\3\0\1\47\1\50"+
    "\1\0\1\47\1\4\1\0\4\4\1\0\12\4\11\0"+
    "\2\4\1\0\1\4\3\0\10\4\1\46\3\0\1\47"+
    "\1\50\1\0\1\47\1\4\1\0\4\4\1\0\1\4"+
    "\1\142\10\4\11\0\2\4\1\0\1\4\3\0\10\4"+
    "\1\46\3\0\1\47\1\50\1\0\1\47\1\4\1\0"+
    "\2\4\1\143\1\4\1\0\12\4\11\0\1\47\1\144"+
    "\1\0\1\144\1\52\2\0\10\47\1\46\3\0\1\47"+
    "\1\50\1\0\1\145\1\47\1\54\4\47\1\0\12\47"+
    "\11\0\1\47\1\145\1\0\1\145\3\0\10\47\1\46"+
    "\3\0\1\47\1\50\1\0\1\145\1\47\1\54\4\47"+
    "\1\0\12\47\12\0\1\117\1\0\1\117\22\0\1\117"+
    "\1\0\1\146\30\0\1\47\1\147\1\0\1\147\1\52"+
    "\2\0\10\47\1\46\3\0\1\47\1\50\1\0\1\145"+
    "\1\47\1\54\4\47\1\0\12\47\12\0\1\150\1\0"+
    "\1\150\55\0\2\4\1\0\1\4\3\0\2\4\1\151"+
    "\5\4\1\46\3\0\1\47\1\50\1\0\1\47\1\4"+
    "\1\0\4\4\1\0\12\4\11\0\2\4\1\0\1\4"+
    "\3\0\3\4\1\152\4\4\1\46\3\0\1\47\1\50"+
    "\1\0\1\47\1\4\1\0\4\4\1\0\12\4\11\0"+
    "\2\4\1\0\1\4\3\0\5\4\1\153\2\4\1\46"+
    "\3\0\1\47\1\50\1\0\1\47\1\4\1\0\4\4"+
    "\1\0\12\4\11\0\2\4\1\0\1\4\3\0\1\154"+
    "\7\4\1\46\3\0\1\47\1\50\1\0\1\47\1\4"+
    "\1\0\4\4\1\0\12\4\11\0\2\4\1\0\1\4"+
    "\3\0\10\4\1\46\3\0\1\47\1\50\1\0\1\47"+
    "\1\4\1\0\3\4\1\155\1\0\12\4\11\0\2\4"+
    "\1\0\1\4\3\0\10\4\1\46\3\0\1\47\1\50"+
    "\1\0\1\47\1\4\1\0\4\4\1\0\4\4\1\156"+
    "\5\4\11\0\2\4\1\0\1\4\3\0\6\4\1\157"+
    "\1\4\1\46\3\0\1\47\1\50\1\0\1\47\1\4"+
    "\1\0\4\4\1\0\12\4\11\0\2\4\1\0\1\4"+
    "\3\0\10\4\1\46\3\0\1\47\1\50\1\0\1\47"+
    "\1\4\1\0\2\4\1\160\1\4\1\0\12\4\11\0"+
    "\2\4\1\0\1\4\3\0\5\4\1\161\2\4\1\46"+
    "\3\0\1\47\1\50\1\0\1\47\1\4\1\0\4\4"+
    "\1\0\12\4\11\0\2\4\1\0\1\4\3\0\6\4"+
    "\1\162\1\4\1\46\3\0\1\47\1\50\1\0\1\47"+
    "\1\4\1\0\4\4\1\0\12\4\11\0\2\4\1\0"+
    "\1\4\3\0\3\4\1\163\4\4\1\46\3\0\1\47"+
    "\1\50\1\0\1\47\1\4\1\0\4\4\1\0\12\4"+
    "\11\0\2\4\1\0\1\4\3\0\1\164\7\4\1\46"+
    "\3\0\1\47\1\50\1\0\1\47\1\4\1\0\4\4"+
    "\1\0\12\4\11\0\2\4\1\0\1\4\3\0\10\4"+
    "\1\46\3\0\1\47\1\50\1\0\1\47\1\4\1\0"+
    "\4\4\1\0\1\4\1\165\10\4\11\0\1\47\1\166"+
    "\1\0\1\166\1\52\1\0\1\167\10\47\1\46\3\0"+
    "\1\47\1\50\1\0\1\170\1\47\1\54\4\47\1\0"+
    "\12\47\11\0\1\47\1\170\1\0\1\170\2\0\1\167"+
    "\10\47\1\46\3\0\1\47\1\50\1\0\1\170\1\47"+
    "\1\54\4\47\1\0\12\47\12\0\1\171\1\0\1\171"+
    "\22\0\1\171\32\0\1\47\1\172\1\0\1\172\1\52"+
    "\1\0\1\167\10\47\1\46\3\0\1\47\1\50\1\0"+
    "\1\170\1\47\1\54\4\47\1\0\12\47\11\0\2\4"+
    "\1\0\1\4\3\0\1\4\1\173\6\4\1\46\3\0"+
    "\1\47\1\50\1\0\1\47\1\4\1\0\4\4\1\0"+
    "\12\4\11\0\2\4\1\0\1\4\3\0\1\174\7\4"+
    "\1\46\3\0\1\47\1\50\1\0\1\47\1\4\1\0"+
    "\4\4\1\0\12\4\11\0\2\4\1\0\1\4\3\0"+
    "\10\4\1\46\3\0\1\47\1\50\1\0\1\47\1\4"+
    "\1\0\4\4\1\0\7\4\1\175\2\4\11\0\2\4"+
    "\1\0\1\4\3\0\10\4\1\46\3\0\1\47\1\50"+
    "\1\0\1\47\1\4\1\0\4\4\1\176\12\4\11\0"+
    "\2\4\1\0\1\4\3\0\6\4\1\177\1\4\1\46"+
    "\3\0\1\47\1\50\1\0\1\47\1\4\1\0\4\4"+
    "\1\0\12\4\11\0\2\4\1\0\1\4\3\0\10\4"+
    "\1\46\3\0\1\47\1\50\1\0\1\47\1\4\1\0"+
    "\4\4\1\0\1\4\1\200\10\4\11\0\2\4\1\0"+
    "\1\4\3\0\10\4\1\46\3\0\1\47\1\50\1\0"+
    "\1\47\1\4\1\0\4\4\1\0\10\4\1\201\1\4"+
    "\11\0\2\4\1\0\1\4\3\0\3\4\1\202\4\4"+
    "\1\46\3\0\1\47\1\50\1\0\1\47\1\4\1\0"+
    "\4\4\1\0\12\4\11\0\2\4\1\0\1\4\3\0"+
    "\10\4\1\46\3\0\1\47\1\50\1\0\1\47\1\4"+
    "\1\0\2\4\1\203\1\4\1\0\12\4\11\0\2\4"+
    "\1\0\1\4\3\0\1\204\7\4\1\46\3\0\1\47"+
    "\1\50\1\0\1\47\1\4\1\0\4\4\1\0\12\4"+
    "\11\0\1\47\1\166\1\0\1\166\1\52\2\0\10\47"+
    "\1\46\3\0\1\47\1\50\1\0\1\170\1\47\1\54"+
    "\4\47\1\0\12\47\12\0\1\205\1\0\1\205\22\0"+
    "\1\205\32\0\1\47\1\170\1\0\1\170\3\0\10\47"+
    "\1\46\3\0\1\47\1\50\1\0\1\170\1\47\1\54"+
    "\4\47\1\0\12\47\11\0\1\47\1\172\1\0\1\172"+
    "\1\52\2\0\10\47\1\46\3\0\1\47\1\50\1\0"+
    "\1\170\1\47\1\54\4\47\1\0\12\47\11\0\2\4"+
    "\1\0\1\4\3\0\10\4\1\46\3\0\1\47\1\50"+
    "\1\0\1\47\1\4\1\0\4\4\1\0\1\4\1\206"+
    "\10\4\11\0\2\4\1\0\1\4\3\0\10\4\1\46"+
    "\3\0\1\47\1\50\1\0\1\47\1\4\1\0\4\4"+
    "\1\0\6\4\1\207\3\4\47\0\1\210\22\0\2\4"+
    "\1\0\1\4\3\0\3\4\1\211\4\4\1\46\3\0"+
    "\1\47\1\50\1\0\1\47\1\4\1\0\4\4\1\0"+
    "\12\4\11\0\2\4\1\0\1\4\3\0\10\4\1\46"+
    "\3\0\1\47\1\50\1\0\1\47\1\4\1\0\4\4"+
    "\1\0\3\4\1\212\6\4\11\0\2\4\1\0\1\4"+
    "\3\0\10\4\1\46\3\0\1\47\1\50\1\0\1\47"+
    "\1\4\1\0\4\4\1\0\1\4\1\213\10\4\12\0"+
    "\1\214\1\0\1\214\22\0\1\214\46\0\1\215\44\0"+
    "\2\4\1\0\1\4\3\0\2\4\1\216\5\4\1\46"+
    "\3\0\1\47\1\50\1\0\1\47\1\4\1\0\4\4"+
    "\1\0\12\4\17\0\1\217\105\0\1\220\25\0\2\4"+
    "\1\0\1\4\3\0\3\4\1\221\4\4\1\46\3\0"+
    "\1\47\1\50\1\0\1\47\1\4\1\0\4\4\1\0"+
    "\12\4\12\0\1\222\1\0\1\222\22\0\1\222\71\0"+
    "\1\223\22\0\1\224\1\0\1\224\22\0\1\224\56\0"+
    "\1\225\63\0\1\226\56\0\1\227\34\0\1\230\1\0"+
    "\1\230\22\0\1\230\33\0\1\231\1\0\1\231\22\0"+
    "\1\231\62\0\1\232\31\0\1\233\1\0\1\233\22\0"+
    "\1\233\33\0\1\234\1\0\1\234\22\0\1\234\62\0"+
    "\1\235\31\0\1\236\1\0\1\236\22\0\1\236\33\0"+
    "\1\237\1\0\1\237\22\0\1\237\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5684];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\2\11\6\1\1\11\1\1\1\11"+
    "\1\1\2\11\16\1\2\11\3\0\1\1\5\0\7\1"+
    "\1\0\1\11\1\0\1\11\14\1\6\11\1\1\1\0"+
    "\1\1\1\0\2\11\1\1\1\0\21\1\2\0\20\1"+
    "\2\0\5\1\1\0\6\1\1\0\2\1\1\0\3\1"+
    "\2\0\1\1\2\0\1\1\5\0\1\11\7\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
/*-*
* funciones y variables
*/
private void imprimir(String descripcion, String lexema) {
System.out.println(lexema + " - " + descripcion);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2712) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caracter inválido \""+yytext() +
"\" en la línea "+yyline+", columna "+yycolumn);
            }
          case 50: break;
          case 2: 
            { imprimir("Espacio en blanco", yytext());
            }
          case 51: break;
          case 3: 
            { imprimir("Nombre de la variable", yytext());
            }
          case 52: break;
          case 4: 
            { imprimir("Número entero", yytext());
            }
          case 53: break;
          case 5: 
            { imprimir("Punto", yytext());
            }
          case 54: break;
          case 6: 
            { imprimir("Operador matemático", yytext());
            }
          case 55: break;
          case 7: 
            { imprimir("Corchete izquierdo", yytext());
            }
          case 56: break;
          case 8: 
            { imprimir("Corchete derecho", yytext());
            }
          case 57: break;
          case 9: 
            { imprimir("Llave izquierda", yytext());
            }
          case 58: break;
          case 10: 
            { imprimir("Llave derecha", yytext());
            }
          case 59: break;
          case 11: 
            { imprimir("Paréntesis izquierdo", yytext());
            }
          case 60: break;
          case 12: 
            { imprimir("Paréntesis derecho", yytext());
            }
          case 61: break;
          case 13: 
            { imprimir("Operador de asignación", yytext());
            }
          case 62: break;
          case 14: 
            { imprimir("Operador mayor que", yytext());
            }
          case 63: break;
          case 15: 
            { imprimir("Operador menor que", yytext());
            }
          case 64: break;
          case 16: 
            { imprimir("Punto y coma", yytext());
            }
          case 65: break;
          case 17: 
            { imprimir("Coma", yytext());
            }
          case 66: break;
          case 18: 
            { imprimir("Número flotante", yytext());
            }
          case 67: break;
          case 19: 
            { imprimir("Numero", yytext());
            }
          case 68: break;
          case 20: 
            { imprimir("Lista", yytext());
            }
          case 69: break;
          case 21: 
            { imprimir("Mapa", yytext());
            }
          case 70: break;
          case 22: 
            { imprimir("Instrucción if", yytext());
            }
          case 71: break;
          case 23: 
            { imprimir("Instrucción do", yytext());
            }
          case 72: break;
          case 24: 
            { imprimir("Operador igualdad", yytext());
            }
          case 73: break;
          case 25: 
            { imprimir("Operador desigualdad", yytext());
            }
          case 74: break;
          case 26: 
            { imprimir("Operador mayor o igual que", yytext());
            }
          case 75: break;
          case 27: 
            { imprimir("Operador menor o igual que", yytext());
            }
          case 76: break;
          case 28: 
            { imprimir("Tipo iterable", yytext());
            }
          case 77: break;
          case 29: 
            { imprimir("Funcion", yytext());
            }
          case 78: break;
          case 30: 
            { imprimir("Cadena de texto", yytext());
            }
          case 79: break;
          case 31: 
            { imprimir("Carácter", yytext());
            }
          case 80: break;
          case 32: 
            { imprimir("Instrucción for", yytext());
            }
          case 81: break;
          case 33: 
            { imprimir("varible alfanumerica", yytext());
            }
          case 82: break;
          case 34: 
            { imprimir("Varible int", yytext());
            }
          case 83: break;
          case 35: 
            { imprimir("Instrucción else", yytext());
            }
          case 84: break;
          case 36: 
            { imprimir("Valor nulo", yytext());
            }
          case 85: break;
          case 37: 
            { imprimir("Instrucción case", yytext());
            }
          case 86: break;
          case 38: 
            { imprimir("Durción en horas, minutos y segundos", yytext());
            }
          case 87: break;
          case 39: 
            { imprimir("Variable Float", yytext());
            }
          case 88: break;
          case 40: 
            { imprimir("Instrucción break", yytext());
            }
          case 89: break;
          case 41: 
            { imprimir("Instrucción while", yytext());
            }
          case 90: break;
          case 42: 
            { imprimir("Instrucción print", yytext());
            }
          case 91: break;
          case 43: 
            { imprimir("Instrucción return", yytext());
            }
          case 92: break;
          case 44: 
            { imprimir("Instrucción switch", yytext());
            }
          case 93: break;
          case 45: 
            { imprimir("Variable double", yytext());
            }
          case 94: break;
          case 46: 
            { imprimir("Variable String", yytext());
            }
          case 95: break;
          case 47: 
            { imprimir("Instrucción continue", yytext());
            }
          case 96: break;
          case 48: 
            { imprimir("Funcion Principal", yytext());
            }
          case 97: break;
          case 49: 
            { imprimir("Fecha y hora", yytext());
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
