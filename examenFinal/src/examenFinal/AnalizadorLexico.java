/* The following code was generated by JFlex 1.6.1 */

package examenFinal;
import javax.swing.JTextArea;

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/abela/git/repository5/examenFinal/src/examenFinal/lenguaje.lex</tt>
 */
public class AnalizadorLexico {
	private JTextArea textArea_1;
  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\43\1\42\1\51\1\51\1\51\22\0\1\70\1\64\1\13"+
    "\1\54\1\0\1\34\1\35\1\12\1\15\1\30\1\26\1\10\1\65"+
    "\1\17\1\27\1\63\1\24\10\41\1\25\1\45\1\31\1\46\1\37"+
    "\1\47\1\44\1\104\1\21\3\40\1\105\1\103\2\40\1\106\1\40"+
    "\1\107\3\40\1\111\3\40\1\72\2\40\1\110\3\40\1\22\1\11"+
    "\1\32\1\14\1\62\1\23\1\0\1\16\1\74\1\77\1\67\1\57"+
    "\1\55\1\73\1\76\1\2\1\40\1\100\1\56\1\3\1\71\1\5"+
    "\1\4\1\40\1\1\1\7\1\6\1\60\1\66\1\75\1\101\1\102"+
    "\1\20\1\52\1\36\1\53\1\61\6\0\1\51\32\0\1\50\u05bf\0"+
    "\12\33\206\0\12\33\306\0\12\33\u019c\0\12\33\166\0\12\33\166\0"+
    "\12\33\166\0\12\33\166\0\12\33\166\0\12\33\166\0\12\33\166\0"+
    "\12\33\166\0\12\33\166\0\12\33\140\0\12\33\166\0\12\33\106\0"+
    "\12\33\u0116\0\12\33\106\0\12\33\u05e6\0\1\50\u015f\0\12\33\46\0"+
    "\12\33\u012c\0\12\33\200\0\12\33\246\0\12\33\6\0\12\33\266\0"+
    "\12\33\126\0\12\33\206\0\12\33\6\0\12\33\u03a6\0\13\50\35\0"+
    "\1\51\1\51\5\0\1\50\57\0\1\50\u0fa0\0\1\50\u761f\0\12\33"+
    "\u02a6\0\12\33\46\0\12\33\306\0\12\33\26\0\12\33\126\0\12\33"+
    "\u0196\0\12\33\u5316\0\12\33\u0586\0\12\33\u0bbc\0\12\33\200\0\12\33"+
    "\74\0\12\33\220\0\12\33\u0116\0\12\33\u01d6\0\12\33\u0176\0\12\33"+
    "\146\0\12\33\u0216\0\12\33\u5176\0\12\33\346\0\12\33\u6c74\0\62\33"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\7\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\1\4\2\1\32\1\33"+
    "\1\34\1\35\1\36\11\2\1\37\1\2\1\40\2\2"+
    "\1\41\1\42\14\2\1\43\1\44\1\0\1\45\1\0"+
    "\1\46\1\47\1\50\2\2\1\51\1\52\1\10\1\0"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\0\1\67\1\70\11\2"+
    "\1\71\1\72\1\73\3\2\1\74\15\2\1\0\1\75"+
    "\4\2\1\41\3\2\1\76\7\2\1\77\10\2\1\100"+
    "\1\2\1\10\1\101\1\54\1\102\1\103\1\2\1\104"+
    "\12\2\1\105\4\2\1\106\2\2\1\107\1\110\26\2"+
    "\1\111\3\2\1\112\1\2\1\113\6\2\1\10\3\2"+
    "\1\114\1\2\1\115\10\2\1\116\6\2\1\117\20\2"+
    "\1\120\6\2\1\0\1\10\1\115\1\121\4\2\1\122"+
    "\1\0\5\2\1\123\1\124\3\2\1\125\1\126\2\2"+
    "\1\127\1\130\1\131\1\132\11\2\1\133\2\2\1\134"+
    "\1\0\1\2\1\135\1\2\1\136\1\0\1\2\1\137"+
    "\2\2\1\140\2\2\1\141\5\2\1\142\6\2\1\0"+
    "\1\2\1\0\2\2\1\143\13\2\1\144\1\2\1\0"+
    "\1\2\1\0\2\2\1\145\1\146\1\147\1\0\2\2"+
    "\1\41\2\2\1\150\1\0\1\151\1\0\4\2\1\0"+
    "\1\2\1\152\2\2\2\0\1\153\1\154\2\2\1\0"+
    "\2\2\1\155\1\0\1\156\1\157\1\2\1\0\1\160"+
    "\1\161\1\0\1\2\2\0\1\162\11\0\1\163\63\0"+
    "\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\u02e4\0\u032e\0\112\0\u0378\0\u03c2\0\u040c"+
    "\0\u0456\0\u04a0\0\u04ea\0\112\0\112\0\u0534\0\u057e\0\u05c8"+
    "\0\u0612\0\112\0\112\0\112\0\112\0\u065c\0\u06a6\0\112"+
    "\0\u06f0\0\112\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\112"+
    "\0\u08ac\0\u08f6\0\u0940\0\112\0\u098a\0\u09d4\0\u0a1e\0\u0a68"+
    "\0\u0ab2\0\u0afc\0\u0b46\0\u0b90\0\u0bda\0\112\0\u0c24\0\u0c6e"+
    "\0\u0cb8\0\u0d02\0\u0d4c\0\u0128\0\u0d96\0\u0de0\0\u0e2a\0\u0e74"+
    "\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\u0fe6\0\u1030\0\u107a\0\u10c4"+
    "\0\112\0\112\0\u02e4\0\u02e4\0\u032e\0\u032e\0\u0378\0\u110e"+
    "\0\u1158\0\u11a2\0\112\0\112\0\u11ec\0\u1236\0\112\0\u1280"+
    "\0\112\0\112\0\112\0\112\0\112\0\112\0\112\0\u12ca"+
    "\0\112\0\u1314\0\u06f0\0\u06f0\0\u073a\0\u135e\0\u13a8\0\u13f2"+
    "\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae\0\112\0\112"+
    "\0\112\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720\0\u176a\0\u17b4"+
    "\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u1926\0\u1970\0\u19ba\0\u1a04"+
    "\0\u1a4e\0\u1a98\0\u0c6e\0\u0c6e\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0"+
    "\0\112\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6"+
    "\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u0128\0\u1f38\0\u1f82\0\u1fcc"+
    "\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u0128\0\u2188\0\u21d2"+
    "\0\u1236\0\112\0\112\0\112\0\u221c\0\u0128\0\u2266\0\u22b0"+
    "\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c\0\u24b6\0\u2500"+
    "\0\u0128\0\u254a\0\u2594\0\u25de\0\u2628\0\u0128\0\u2672\0\u26bc"+
    "\0\u0128\0\u0128\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e\0\u2878"+
    "\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8"+
    "\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u2cce\0\u2d18"+
    "\0\u0128\0\u2d62\0\u2dac\0\u2df6\0\u0128\0\u2e40\0\u0128\0\u2e8a"+
    "\0\u2ed4\0\u2f1e\0\u2f68\0\u2fb2\0\u2ffc\0\u3046\0\u3090\0\u30da"+
    "\0\u3124\0\u0128\0\u316e\0\u0128\0\u31b8\0\u3202\0\u324c\0\u3296"+
    "\0\u32e0\0\u332a\0\u3374\0\u33be\0\u0128\0\u3408\0\u3452\0\u349c"+
    "\0\u34e6\0\u3530\0\u357a\0\u0128\0\u35c4\0\u360e\0\u3658\0\u36a2"+
    "\0\u36ec\0\u3736\0\u3780\0\u37ca\0\u3814\0\u385e\0\u38a8\0\u38f2"+
    "\0\u393c\0\u3986\0\u39d0\0\u3a1a\0\u0128\0\u3a64\0\u3aae\0\u3af8"+
    "\0\u3b42\0\u3b8c\0\u3bd6\0\u3c20\0\u3c6a\0\u3cb4\0\u0128\0\u3cfe"+
    "\0\u3d48\0\u3d92\0\u3ddc\0\u0128\0\u3e26\0\u3e70\0\u3eba\0\u3f04"+
    "\0\u3f4e\0\u3f98\0\u0128\0\u0128\0\u3fe2\0\u402c\0\u4076\0\u0128"+
    "\0\u0128\0\u40c0\0\u410a\0\u0128\0\u0128\0\u0128\0\u0128\0\u4154"+
    "\0\u419e\0\u41e8\0\u4232\0\u427c\0\u42c6\0\u4310\0\u435a\0\u43a4"+
    "\0\u0128\0\u43ee\0\u4438\0\u0128\0\u4482\0\u44cc\0\u0128\0\u4516"+
    "\0\u0128\0\u4560\0\u45aa\0\u0128\0\u45f4\0\u463e\0\u0128\0\u4688"+
    "\0\u46d2\0\u0128\0\u471c\0\u4766\0\u47b0\0\u47fa\0\u4844\0\u0128"+
    "\0\u488e\0\u48d8\0\u4922\0\u496c\0\u49b6\0\u4a00\0\u4a4a\0\u4a94"+
    "\0\u4ade\0\u4b28\0\u4b72\0\u0128\0\u4bbc\0\u4c06\0\u4c50\0\u4c9a"+
    "\0\u4ce4\0\u4d2e\0\u4d78\0\u4dc2\0\u4e0c\0\u4e56\0\u4ea0\0\u0128"+
    "\0\u4eea\0\u4f34\0\u4f7e\0\u4fc8\0\u5012\0\u505c\0\u0128\0\u50a6"+
    "\0\u0128\0\u50f0\0\u513a\0\u5184\0\u0128\0\u51ce\0\u5218\0\u0128"+
    "\0\u5262\0\u0128\0\u52ac\0\u52f6\0\u5340\0\u538a\0\u53d4\0\u541e"+
    "\0\u5468\0\u0128\0\u54b2\0\u54fc\0\u5546\0\u5590\0\u0128\0\u0128"+
    "\0\u55da\0\u5624\0\u566e\0\u56b8\0\u5702\0\u0128\0\u574c\0\112"+
    "\0\u0128\0\u5796\0\u57e0\0\u0128\0\u0128\0\u582a\0\u5874\0\u58be"+
    "\0\u5908\0\u0128\0\u5952\0\u599c\0\u59e6\0\u5a30\0\u5a7a\0\u5ac4"+
    "\0\u5b0e\0\u5b58\0\u5ba2\0\112\0\u5bec\0\u5c36\0\u5c80\0\u5cca"+
    "\0\u5d14\0\u5d5e\0\u5da8\0\u5df2\0\u5e3c\0\u5e86\0\u5ed0\0\u5f1a"+
    "\0\u5f64\0\u5fae\0\u5ff8\0\u6042\0\u608c\0\u60d6\0\u6120\0\u616a"+
    "\0\u61b4\0\u61fe\0\u6248\0\u6292\0\u62dc\0\u6326\0\u6370\0\u63ba"+
    "\0\u6404\0\u644e\0\u6498\0\u64e2\0\u652c\0\u6576\0\u65c0\0\u660a"+
    "\0\u6654\0\u669e\0\u66e8\0\u6732\0\u677c\0\u67c6\0\u6810\0\u685a"+
    "\0\u68a4\0\u68ee\0\u6938\0\u6982\0\u69cc\0\u6a16\0\u6a60\0\112";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\2\1\15\1\16\1\17\1\20"+
    "\4\5\2\21\1\22\1\23\1\24\1\25\1\2\1\21"+
    "\1\26\1\27\1\30\1\31\1\5\1\21\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\40\1\57\1\60\1\61\1\62"+
    "\1\63\1\5\1\64\3\5\1\65\1\66\5\5\113\0"+
    "\1\5\1\67\5\5\2\0\1\70\3\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\2\5\1\71\1\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\2\5\1\72"+
    "\3\5\1\73\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\1\74\3\5\5\0\1\5\1\75\1\0\1\76"+
    "\12\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\1\77\6\5\6\0\1\100"+
    "\1\0\6\5\12\0\2\5\13\0\3\5\1\101\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\1\102\1\5\1\0\13\5\1\0\5\5\1\0\1\103"+
    "\6\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\5\5\1\104\5\5\1\0"+
    "\5\5\1\0\4\5\1\105\1\106\1\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\3\5\1\107\5\0"+
    "\2\5\1\0\4\5\1\110\6\5\1\0\5\5\10\0"+
    "\1\111\26\0\1\112\52\0\14\113\1\114\25\113\1\0"+
    "\6\113\1\0\40\113\11\115\1\0\1\116\1\115\2\0"+
    "\10\115\2\0\2\115\1\0\12\115\1\0\14\115\1\0"+
    "\27\115\42\117\1\0\6\117\1\0\40\117\1\0\6\5"+
    "\1\120\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\1\5\1\121\1\0\4\5\1\122\6\5"+
    "\1\0\5\5\17\0\1\123\17\0\1\124\76\0\2\125"+
    "\1\0\1\126\3\0\1\125\5\0\1\125\107\0\1\127"+
    "\101\0\1\130\121\0\1\131\107\0\1\132\1\0\1\133"+
    "\110\0\1\134\1\135\111\0\1\136\111\0\1\137\6\0"+
    "\1\140\102\0\1\141\7\0\1\142\42\0\42\143\1\0"+
    "\6\143\1\0\1\143\1\144\36\143\1\0\7\145\6\0"+
    "\1\145\1\0\6\145\12\0\2\145\13\0\4\145\5\0"+
    "\2\145\1\0\13\145\1\0\5\145\1\0\1\5\1\146"+
    "\2\5\1\147\2\5\6\0\1\150\1\0\6\5\12\0"+
    "\2\5\13\0\1\5\1\151\2\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\2\5\1\152\1\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\1\5\1\153"+
    "\2\5\5\0\2\5\1\0\1\154\7\5\1\155\2\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\1\156"+
    "\12\5\1\0\5\5\37\0\1\157\111\0\1\160\111\0"+
    "\1\161\53\0\4\5\1\162\2\5\6\0\1\163\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\1\5\1\164\2\5\1\165"+
    "\2\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\2\5\1\166\1\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\2\5\1\167\1\170\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\5\5\1\171\1\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\2\5\1\172"+
    "\1\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\2\5\1\173\1\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\1\174\6\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\5\5"+
    "\1\175\5\5\1\0\5\5\1\0\4\5\1\176\2\5"+
    "\6\0\1\177\1\0\6\5\12\0\2\5\13\0\1\5"+
    "\1\200\2\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\7\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\3\5\1\201\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\2\5\1\202\4\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\12\203\1\204\27\203\1\0\6\203"+
    "\1\0\40\203\1\0\2\5\1\205\1\206\1\5\1\207"+
    "\1\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\3\5\1\210\3\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\3\0\1\211\1\0\2\5\1\0"+
    "\1\5\1\212\11\5\1\0\1\213\4\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\2\5"+
    "\1\214\1\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\5\5\1\215\1\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\1\5\1\216\2\5\1\217\2\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\1\220"+
    "\6\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\5\5\1\221\1\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\3\5\1\222"+
    "\7\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\2\5\1\223\1\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\3\5\1\224"+
    "\5\0\2\5\1\0\11\5\1\225\1\5\1\0\5\5"+
    "\1\0\1\226\1\227\5\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\1\230\6\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\231\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\3\5\1\232\3\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\3\5\1\233\7\5\1\0\5\5\1\0"+
    "\1\5\1\234\5\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\11\5\1\235"+
    "\1\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\1\5\1\236"+
    "\1\0\13\5\1\0\5\5\1\0\7\5\6\0\1\237"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\24\0\2\240\1\0\1\126"+
    "\3\0\1\240\5\0\1\240\74\0\2\241\5\0\1\241"+
    "\5\0\1\241\77\0\1\242\121\0\1\243\111\0\1\244"+
    "\53\0\7\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\1\245\12\5\1\0"+
    "\5\5\1\0\1\246\6\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\1\5\1\247\2\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\4\5\1\250\2\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\1\251\12\5\1\0\5\5\1\0"+
    "\6\5\1\252\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\2\5\1\253\1\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\3\5\1\254\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\3\5\1\255\1\5\1\256"+
    "\1\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\1\5\1\257\5\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\1\5\1\260\5\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\1\261\6\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\7\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\1\262\3\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\3\5\1\263"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\3\5"+
    "\1\264\3\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\1\265\3\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\4\5\1\266"+
    "\6\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\1\5\1\267\2\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\1\270\6\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\5\5"+
    "\1\271\1\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\5\5\1\272\1\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\2\5\1\273\1\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\1\5\1\274\5\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\1\275\12\5\1\0\5\5\1\0"+
    "\5\5\1\276\1\277\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\4\5\1\300\2\5\6\0\1\301\1\0"+
    "\6\5\12\0\2\5\13\0\2\5\1\302\1\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\1\303\12\5\1\0\5\5\1\0\3\5"+
    "\1\304\3\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\4\5\1\305\2\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\2\5\1\306\1\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\7\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\3\5\1\307\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\4\5\1\310"+
    "\2\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\1\5\1\311\2\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\3\5\1\312\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\2\5\1\313\4\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\7\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\1\314\12\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\2\5\1\315"+
    "\1\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\1\316\1\5\1\0\1\317\12\5\1\0"+
    "\5\5\1\0\5\5\1\320\1\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\5\5\1\321\1\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\13\5\1\0\1\5\1\322\3\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\1\5\1\323\2\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\1\324\6\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\2\5\1\325\1\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\4\5\1\326\2\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\6\5"+
    "\1\266\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\5\5\1\327\1\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\5\5\1\330\1\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\2\5\1\331\1\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\6\5\1\332"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\5\5"+
    "\1\333\1\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\7\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\1\334\12\5\1\0"+
    "\5\5\1\0\1\5\1\335\5\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\24\0\2\336\1\0\1\126\3\0"+
    "\1\336\5\0\1\336\51\0\7\5\6\0\1\337\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\6\5\1\224\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\7\5\6\0\1\340"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\7\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\2\5\1\341\10\5\1\0\5\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\2\5"+
    "\1\342\1\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\2\5\1\343\4\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\2\5\1\344\4\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\4\5\1\345\2\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\2\5"+
    "\1\346\1\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\4\5\1\347\2\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\1\5\1\350\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\1\351\3\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\7\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\3\5\1\352\7\5\1\0\5\5\1\0\1\353"+
    "\6\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\354\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\1\5\1\355\2\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\1\5\1\356\5\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\357\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\1\5\1\360\2\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\5\5\1\361"+
    "\1\335\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\6\5\1\362\4\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\6\5\1\363"+
    "\4\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\2\5\1\364\1\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\1\365\12\5\1\0\5\5\1\0\6\5"+
    "\1\366\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\367\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\6\5\1\370\4\5\1\0"+
    "\5\5\1\0\4\5\1\371\2\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\1\372\1\5"+
    "\1\0\13\5\1\0\5\5\1\0\7\5\6\0\1\373"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\1\374\6\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\1\375\6\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\2\5"+
    "\1\376\1\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\3\5\1\377\3\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\3\5"+
    "\1\u0100\7\5\1\0\5\5\1\0\3\5\1\u0101\3\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\5\5"+
    "\1\u0102\1\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\1\u0103\6\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\u0104\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\5\5\1\u0105\1\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\2\5\1\u0106\1\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\1\u0107\3\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\1\5"+
    "\1\u0108\5\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\1\u0109\6\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\4\5\1\225"+
    "\6\5\1\0\5\5\1\0\1\5\1\334\5\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\1\266\6\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\5\5"+
    "\1\u010a\1\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\7\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\6\5\1\u010b\4\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\6\5"+
    "\1\344\4\5\1\0\5\5\1\0\5\5\1\344\1\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\17\0\1\u010c"+
    "\4\0\2\u010d\1\0\1\126\3\0\1\u010d\5\0\1\u010d"+
    "\51\0\7\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\1\5\1\u010e\2\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\5\5\1\u010f\1\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\5\5\1\u0110\1\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\2\5"+
    "\1\u0111\1\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\1\u0112\6\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\1\u0113\12\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\1\u0114"+
    "\12\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\u0115"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\2\5\1\u0116\1\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\1\5\1\u0117"+
    "\2\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\2\5\1\u0118\1\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\3\5\1\u0119\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\1\u011a"+
    "\12\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\7\5\1\u011b\3\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\2\5\1\u011c"+
    "\1\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\1\5\1\u011d\5\5\6\0\1\u011e\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\u011f\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\5\5\1\225"+
    "\5\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\2\5\1\u0120\1\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\6\5\1\344"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\1\u0121"+
    "\6\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\5\5\1\u0122\1\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\1\u0123\6\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\2\5\1\u0124\1\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\5\5\1\u0125\1\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\1\u0126\12\5\1\0\5\5\1\0"+
    "\5\5\1\u0127\1\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\2\5\1\u0128\4\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\2\5\1\u0129\1\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\6\5\1\u012a"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\5\5"+
    "\1\u012b\1\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\1\5\1\u012c\5\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\6\5\1\u012d\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\5\5\1\u012e\1\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\6\5\1\u012f\4\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\1\5\1\u0130\4\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\6\5\1\u0131"+
    "\4\5\1\0\5\5\1\0\1\5\1\u0132\5\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\1\u0133\6\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\5\5\1\u0134\5\5\1\0\5\5"+
    "\24\0\2\u0135\5\0\1\u0135\5\0\1\u0135\74\0\2\u010d"+
    "\1\0\1\126\3\0\1\u010d\5\0\1\u010d\51\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\1\5"+
    "\1\u0136\2\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\7\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\5\5\1\u0137\5\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\1\u0138"+
    "\12\5\1\0\5\5\1\0\5\5\1\u0139\1\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\1\5\1\366\1\0\13\5\1\0\5\5\3\0\1\u013a"+
    "\107\0\1\u013b\6\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\2\5\1\u013c\1\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\6\5\1\u013d\4\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\1\5\1\u013e"+
    "\2\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\2\5\1\u013f\10\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\1\u0140\12\5"+
    "\1\0\5\5\1\0\1\5\1\u0141\5\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\5\5\1\u0142\1\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\1\5"+
    "\1\u0143\5\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\5\5\1\u0144\1\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\2\5\1\u0145\1\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\1\u0146\6\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\2\5\1\u0147"+
    "\1\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\11\5\1\u0148\1\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\6\5\1\u0149"+
    "\4\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\2\5\1\u014a\1\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\2\5\1\u0131"+
    "\1\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\5\5\1\u014b\1\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\3\5\1\u014c"+
    "\7\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\1\5\1\u014d"+
    "\1\0\13\5\1\0\5\5\1\0\1\5\1\u014e\5\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\24\0\2\u014f"+
    "\5\0\1\u014f\5\0\1\u014f\51\0\7\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\11\5\1\225\1\5\1\0\5\5\1\0\5\5"+
    "\1\u0150\1\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\16\0\1\u0151\74\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\2\5\1\u0152\1\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\7\5\6\0\1\u0153"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\5\5\1\u0154\1\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\3\5"+
    "\1\u0155\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\1\u0156\12\5\1\0\5\5"+
    "\1\0\4\5\1\u0157\2\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\4\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\6\5\1\u0158\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\1\u0159\12\5\1\0\5\5\1\0\6\5\1\u015a\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\5\5\1\u015b"+
    "\1\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\u015c\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\6\5\1\u015d\4\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\2\5\1\u015e\1\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\6\5\1\u015f\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\4\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\7\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\2\5\1\u0160\1\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\1\u0161\12\5\1\0\5\5\17\0"+
    "\1\u0162\73\0\7\5\6\0\1\5\1\0\1\5\1\u0163"+
    "\4\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\2\0\1\u0164\110\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\1\u0165\12\5\1\0\5\5\1\0\5\5"+
    "\1\u0166\1\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\7\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\2\5\1\u0167\1\5\5\0\2\5\1\0\13\5"+
    "\1\0\5\5\1\0\6\5\1\u0168\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\1\u0169\12\5\1\0\5\5\1\0\7\5\1\u016a\5\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\1\0\5\5\1\366"+
    "\1\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\2\5\1\u016b\1\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\4\5\1\u016c\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\1\5\1\u016d\2\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\1\0\5\5\1\u016e\1\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\1\5\1\u0131\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\2\5\1\u016f\1\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\2\5\1\u0170"+
    "\10\5\1\0\5\5\24\0\2\u0171\5\0\1\u0171\5\0"+
    "\1\u0171\51\0\5\5\1\u0172\1\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\71\0\1\u0173\21\0\7\5\6\0"+
    "\1\5\1\0\6\5\12\0\2\5\13\0\4\5\5\0"+
    "\2\5\1\0\6\5\1\u0174\4\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\2\5\1\u0175\1\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\5\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\2\5\1\u0176\1\u0177\1\5\11\0\1\u0178\101\0\5\5"+
    "\1\u0179\1\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\1\0\7\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\1\u017a\3\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\1\5\1\u017b\5\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\5\5\1\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\1\u017c\12\5\1\0\5\5\24\0\2\u017d\5\0\1\u017d"+
    "\5\0\1\u017d\65\0\1\u017e\75\0\7\5\6\0\1\5"+
    "\1\0\6\5\12\0\2\5\13\0\2\5\1\u017f\1\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\1\5\1\u0180\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\2\5\1\u0181\1\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\1\0\7\5\6\0\1\u0182\1\0\6\5\12\0"+
    "\2\5\13\0\4\5\5\0\2\5\1\0\13\5\1\0"+
    "\5\5\12\0\1\u0183\100\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\4\5\5\0\2\5\1\0"+
    "\13\5\1\0\4\5\1\u0184\1\0\4\5\1\u0185\2\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\4\5"+
    "\5\0\2\5\1\0\13\5\1\0\5\5\1\0\5\5"+
    "\1\u0186\1\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\13\5\1\0\5\5"+
    "\24\0\2\u0187\5\0\1\u0187\5\0\1\u0187\100\0\1\u0188"+
    "\62\0\7\5\6\0\1\5\1\0\6\5\12\0\2\5"+
    "\13\0\4\5\5\0\2\5\1\0\11\5\1\u0189\1\5"+
    "\1\0\5\5\1\0\7\5\6\0\1\5\1\0\6\5"+
    "\12\0\2\5\13\0\1\5\1\u018a\2\5\5\0\2\5"+
    "\1\0\13\5\1\0\5\5\13\0\1\u018b\77\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\1\u018c"+
    "\3\5\5\0\2\5\1\0\13\5\1\0\5\5\1\0"+
    "\7\5\6\0\1\5\1\0\6\5\12\0\2\5\13\0"+
    "\4\5\5\0\2\5\1\0\1\u018d\12\5\1\0\5\5"+
    "\24\0\2\u018e\5\0\1\u018e\5\0\1\u018e\51\0\7\5"+
    "\6\0\1\5\1\0\6\5\12\0\2\5\13\0\3\5"+
    "\1\u018f\5\0\2\5\1\0\13\5\1\0\5\5\14\0"+
    "\1\u0190\142\0\1\u0191\45\0\7\5\6\0\1\5\1\0"+
    "\6\5\12\0\2\5\13\0\2\5\1\u0192\1\5\5\0"+
    "\2\5\1\0\13\5\1\0\5\5\15\0\1\u0193\120\0"+
    "\2\u0194\5\0\1\u0194\5\0\1\u0194\61\0\1\u0195\124\0"+
    "\2\u0196\5\0\1\u0196\5\0\1\u0196\66\0\1\u0197\140\0"+
    "\1\u0198\63\0\1\u0199\116\0\2\u019a\5\0\1\u019a\5\0"+
    "\1\u019a\70\0\1\u019b\115\0\2\u019c\5\0\1\u019c\5\0"+
    "\1\u019c\71\0\1\u019d\107\0\1\u019e\114\0\1\u019f\112\0"+
    "\1\u01a0\102\0\1\u01a1\106\0\1\u01a2\116\0\1\u01a3\112\0"+
    "\1\u01a4\112\0\1\u01a5\112\0\1\u01a6\107\0\1\u01a7\114\0"+
    "\1\u01a8\113\0\1\u01a9\104\0\1\u01aa\117\0\1\u01ab\107\0"+
    "\1\u01ac\102\0\1\u01ad\123\0\1\u01ae\100\0\1\u01af\123\0"+
    "\1\u01b0\73\0\1\u01b1\116\0\1\u01b2\112\0\1\u01b3\112\0"+
    "\1\u01b4\112\0\1\u01b5\107\0\1\u01b6\114\0\1\u01b7\112\0"+
    "\1\u01b8\102\0\1\u01b9\106\0\1\u01ba\116\0\1\u01bb\112\0"+
    "\1\u01bc\112\0\1\u01bd\112\0\1\u01be\107\0\1\u01bf\114\0"+
    "\1\u01c0\113\0\1\u01c1\104\0\1\u01c2\117\0\1\u01c3\107\0"+
    "\1\u01c4\102\0\1\u01c5\123\0\1\u01c6\113\0\1\u01c7\107\0"+
    "\1\u01c8\113\0\1\u01c9\72\0\1\u01ca\112\0\1\u01cb\112\0"+
    "\1\u01cc\112\0\1\u01cd\104\0\1\u01ce\130\0\1\u01cf\114\0"+
    "\1\u01d0\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27306];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\6\1\2\11\4\1\4\11"+
    "\2\1\1\11\1\1\1\11\5\1\1\11\3\1\1\11"+
    "\11\1\1\11\22\1\2\11\1\0\1\1\1\0\5\1"+
    "\2\11\1\1\1\0\1\11\1\1\7\11\1\1\1\11"+
    "\1\1\1\0\13\1\3\11\21\1\1\0\5\1\1\11"+
    "\30\1\3\11\147\1\1\0\10\1\1\0\37\1\1\0"+
    "\4\1\1\0\24\1\1\0\1\1\1\0\20\1\1\0"+
    "\1\1\1\0\5\1\1\0\6\1\1\0\1\1\1\0"+
    "\4\1\1\0\4\1\2\0\4\1\1\0\3\1\1\0"+
    "\1\11\2\1\1\0\2\1\1\0\1\1\2\0\1\1"+
    "\11\0\1\11\63\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
/*-*
* funciones y variables
*/
  private void imprimir(String descripcion, String lexema) {
	  textArea_1.append(lexema + " - " + descripcion+ "\n");
	  System.out.println(lexema + " - " + descripcion);
	  }


	    /**
	     * Creates a new scanner
	     *
	     * @param   in  the java.io.Reader to read input from.
	     */
	    public AnalizadorLexico(java.io.Reader in, JTextArea jta) {
	  	this.textArea_1 = jta;
	      this.zzReader = in;
	    }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 432) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caracter inválido \""+yytext() +
"\" en la línea "+yyline+", columna "+yycolumn);
            }
          case 117: break;
          case 2: 
            { imprimir("Identificador variable", yytext());
            }
          case 118: break;
          case 3: 
            { imprimir("Suma", yytext());
            }
          case 119: break;
          case 4: 
            { imprimir("Corchete izquierdo", yytext());
            }
          case 120: break;
          case 5: 
            { imprimir("Corchete derecho", yytext());
            }
          case 121: break;
          case 6: 
            { imprimir("Paréntesis izquierdo", yytext());
            }
          case 122: break;
          case 7: 
            { imprimir("Resta", yytext());
            }
          case 123: break;
          case 8: 
            { imprimir("Entero", yytext());
            }
          case 124: break;
          case 9: 
            { imprimir("Multiplicacion", yytext());
            }
          case 125: break;
          case 10: 
            { imprimir("Punto", yytext());
            }
          case 126: break;
          case 11: 
            { imprimir("Paréntesis derecho", yytext());
            }
          case 127: break;
          case 12: 
            { imprimir("Punto y coma", yytext());
            }
          case 128: break;
          case 13: 
            { imprimir("Modulo", yytext());
            }
          case 129: break;
          case 14: 
            { imprimir("AND bit a bit", yytext());
            }
          case 130: break;
          case 15: 
            { imprimir("OR bit a bit", yytext());
            }
          case 131: break;
          case 16: 
            { imprimir("Asignacion", yytext());
            }
          case 132: break;
          case 17: 
            { imprimir("Caracter nueva linea", yytext());
            }
          case 133: break;
          case 18: 
            { imprimir("caracter tabulacion", yytext());
            }
          case 134: break;
          case 19: 
            { imprimir("Operador ternario", yytext());
            }
          case 135: break;
          case 20: 
            { imprimir("Dos puntos", yytext());
            }
          case 136: break;
          case 21: 
            { imprimir("Operador menor que", yytext());
            }
          case 137: break;
          case 22: 
            { imprimir("Operador mayor que", yytext());
            }
          case 138: break;
          case 23: 
            { imprimir("Caracter blanco", yytext());
            }
          case 139: break;
          case 24: 
            { imprimir("Llave izquierda", yytext());
            }
          case 140: break;
          case 25: 
            { imprimir("Llave derecha", yytext());
            }
          case 141: break;
          case 26: 
            { imprimir("Complemento bit a bit", yytext());
            }
          case 142: break;
          case 27: 
            { imprimir("XOR bit a bit", yytext());
            }
          case 143: break;
          case 28: 
            { imprimir("Operador division", yytext());
            }
          case 144: break;
          case 29: 
            { imprimir("Negacion logica", yytext());
            }
          case 145: break;
          case 30: 
            { imprimir("Coma", yytext());
            }
          case 146: break;
          case 31: 
            { imprimir("Matadato", yytext());
            }
          case 147: break;
          case 32: 
            { imprimir("Comentario una linea", yytext());
            }
          case 148: break;
          case 33: 
            { imprimir("Palabra clave de operadores de comparación", yytext());
            }
          case 149: break;
          case 34: 
            { imprimir("Instrucción if", yytext());
            }
          case 150: break;
          case 35: 
            { imprimir("Incremento", yytext());
            }
          case 151: break;
          case 36: 
            { imprimir("Suma asignacion", yytext());
            }
          case 152: break;
          case 37: 
            { imprimir("Lista", yytext());
            }
          case 153: break;
          case 38: 
            { imprimir("Cadena", yytext());
            }
          case 154: break;
          case 39: 
            { imprimir("Expresion funcion", yytext());
            }
          case 155: break;
          case 40: 
            { imprimir("s Libreria", yytext());
            }
          case 156: break;
          case 41: 
            { imprimir("Decremento", yytext());
            }
          case 157: break;
          case 42: 
            { imprimir("Resta asignacion", yytext());
            }
          case 158: break;
          case 43: 
            { imprimir("Mutiplicacion asignacion", yytext());
            }
          case 159: break;
          case 44: 
            { imprimir("Operador Propagacion", yytext());
            }
          case 160: break;
          case 45: 
            { imprimir("Modulo asignacion", yytext());
            }
          case 161: break;
          case 46: 
            { imprimir("And logico", yytext());
            }
          case 162: break;
          case 47: 
            { imprimir("AND bit a bit asignacion", yytext());
            }
          case 163: break;
          case 48: 
            { imprimir("Or logico", yytext());
            }
          case 164: break;
          case 49: 
            { imprimir("OR bit a bit asignacion", yytext());
            }
          case 165: break;
          case 50: 
            { imprimir("Operador igualdad", yytext());
            }
          case 166: break;
          case 51: 
            { imprimir("Operador menor o igual que", yytext());
            }
          case 167: break;
          case 52: 
            { imprimir("Desplazamiento izquierda", yytext());
            }
          case 168: break;
          case 53: 
            { imprimir("Operador mayor o igual que", yytext());
            }
          case 169: break;
          case 54: 
            { imprimir("Desplazamiento derecha", yytext());
            }
          case 170: break;
          case 55: 
            { imprimir("Mapa", yytext());
            }
          case 171: break;
          case 56: 
            { imprimir("Simbolo", yytext());
            }
          case 172: break;
          case 57: 
            { imprimir("XOR bit bit asignacion", yytext());
            }
          case 173: break;
          case 58: 
            { imprimir("Operador division asignacion", yytext());
            }
          case 174: break;
          case 59: 
            { imprimir("Operador desigualdad", yytext());
            }
          case 175: break;
          case 60: 
            { imprimir("Instrucción do", yytext());
            }
          case 176: break;
          case 61: 
            { imprimir("Expreion regular", yytext());
            }
          case 177: break;
          case 62: 
            { imprimir("Varible int", yytext());
            }
          case 178: break;
          case 63: 
            { imprimir("Palabra clave de excepciones", yytext());
            }
          case 179: break;
          case 64: 
            { imprimir("Agregar", yytext());
            }
          case 180: break;
          case 65: 
            { imprimir("Decimal", yytext());
            }
          case 181: break;
          case 66: 
            { imprimir("Desplazamiento izquierda asignacion", yytext());
            }
          case 182: break;
          case 67: 
            { imprimir("Desplazamiento derecha asignacion", yytext());
            }
          case 183: break;
          case 68: 
            { imprimir("Instrucción for", yytext());
            }
          case 184: break;
          case 69: 
            { imprimir("varible alfanumerica", yytext());
            }
          case 185: break;
          case 70: 
            { imprimir("Palabra clave de clases y objetos", yytext());
            }
          case 186: break;
          case 71: 
            { imprimir("Cojunto", yytext());
            }
          case 187: break;
          case 72: 
            { imprimir("Obtener valor", yytext());
            }
          case 188: break;
          case 73: 
            { imprimir("Partir", yytext());
            }
          case 189: break;
          case 74: 
            { imprimir("booleano", yytext());
            }
          case 190: break;
          case 75: 
            { imprimir("Ordenar", yytext());
            }
          case 191: break;
          case 76: 
            { imprimir("Instrucción else", yytext());
            }
          case 192: break;
          case 77: 
            { imprimir("Palabra clave de declaración", yytext());
            }
          case 193: break;
          case 78: 
            { imprimir("Valor nulo", yytext());
            }
          case 194: break;
          case 79: 
            { imprimir("Instrucción case", yytext());
            }
          case 195: break;
          case 80: 
            { imprimir("Instrucción print", yytext());
            }
          case 196: break;
          case 81: 
            { imprimir("Variable Float", yytext());
            }
          case 197: break;
          case 82: 
            { imprimir("Union", yytext());
            }
          case 198: break;
          case 83: 
            { imprimir("Instrucción break", yytext());
            }
          case 199: break;
          case 84: 
            { imprimir("Instrucción while", yytext());
            }
          case 200: break;
          case 85: 
            { imprimir("Clonar", yytext());
            }
          case 201: break;
          case 86: 
            { imprimir("Limpiar conjunto", yytext());
            }
          case 202: break;
          case 87: 
            { imprimir("Remover", yytext());
            }
          case 203: break;
          case 88: 
            { imprimir("Ciclo repeat", yytext());
            }
          case 204: break;
          case 89: 
            { imprimir("Instrucción return", yytext());
            }
          case 205: break;
          case 90: 
            { imprimir("Importar", yytext());
            }
          case 206: break;
          case 91: 
            { imprimir("Modificador de acceso", yytext());
            }
          case 207: break;
          case 92: 
            { imprimir("Instrucción switch", yytext());
            }
          case 208: break;
          case 93: 
            { imprimir("Longitud", yytext());
            }
          case 209: break;
          case 94: 
            { imprimir("Exportar", yytext());
            }
          case 210: break;
          case 95: 
            { imprimir("Variable double", yytext());
            }
          case 211: break;
          case 96: 
            { imprimir("Variable String", yytext());
            }
          case 212: break;
          case 97: 
            { imprimir("Concatenar", yytext());
            }
          case 213: break;
          case 98: 
            { imprimir("Vacio", yytext());
            }
          case 214: break;
          case 99: 
            { imprimir("Por defecto", yytext());
            }
          case 215: break;
          case 100: 
            { imprimir("Sobreescribir", yytext());
            }
          case 216: break;
          case 101: 
            { imprimir("Instrucción continue", yytext());
            }
          case 217: break;
          case 102: 
            { imprimir("Contiene", yytext());
            }
          case 218: break;
          case 103: 
            { imprimir("Palabra clave de funciones", yytext());
            }
          case 219: break;
          case 104: 
            { imprimir("Subcadena", yytext());
            }
          case 220: break;
          case 105: 
            { imprimir("Ordenar Elemento", yytext());
            }
          case 221: break;
          case 106: 
            { imprimir("Subconjunto", yytext());
            }
          case 222: break;
          case 107: 
            { imprimir("Diferencia", yytext());
            }
          case 223: break;
          case 108: 
            { imprimir("Depreciado", yytext());
            }
          case 224: break;
          case 109: 
            { imprimir("Palabra clave de manejo de mapas", yytext());
            }
          case 225: break;
          case 110: 
            { imprimir("Funcion Principal", yytext());
            }
          case 226: break;
          case 111: 
            { imprimir("Contiene Clave", yytext());
            }
          case 227: break;
          case 112: 
            { imprimir("Superconjunto", yytext());
            }
          case 228: break;
          case 113: 
            { imprimir("Interseccion", yytext());
            }
          case 229: break;
          case 114: 
            { imprimir("Contiene valor", yytext());
            }
          case 230: break;
          case 115: 
            { imprimir("Fecha hora", yytext());
            }
          case 231: break;
          case 116: 
            { imprimir("Importaciones", yytext());
            }
          case 232: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
